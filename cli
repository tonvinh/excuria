#!/bin/bash

IMAGE_NAME="tonvinh/docker-nginx-php7:latest"
CONTAINER_NAME="execuria"
CONTAINER_PORT="1234"

function docker_run {
    if docker ps | grep -qs $CONTAINER_NAME; then
        echo "Container already exists!"
    elif docker ps -a | grep -qs $CONTAINER_NAME; then
        echo "Starting container '$CONTAINER_NAME'..."
        docker start $CONTAINER_NAME
    else
        echo "Creating container '$CONTAINER_NAME'..."
        docker run --name $CONTAINER_NAME -d -p 127.0.0.1:$CONTAINER_PORT:80 -v `pwd`:/src $IMAGE_NAME
    fi
}

function docker_exec {
    if docker ps -a | grep -qs $CONTAINER_NAME; then
        docker exec -it $CONTAINER_NAME bash -c "cd /src; $*"
    else
        echo "Please start the container first!"
        exit
    fi
}

if [ -z $1 ]; then
    echo -e "Supported arguments:
        * init
        * test
        * xdebug [enable|disable]
        * docker [start|stop|restart|reload|update|ssh|logs]
    "
elif [ "$1" == "init" ]; then
    echo "Initiating application..."
    cp .env.dev .env
    chmod -R 777 storage bootstrap/cache
    docker_exec "composer install"
elif [ "$1" == "test" ]; then
    docker_exec "vendor/bin/phpunit --coverage-html coverage"
    docker_exec "vendor/bin/phpcs --standard=PSR2 --encoding=utf-8 -n -p app"
elif [ "$1" == "xdebug" ]; then
    if [ "$2" == "enable" ]; then
        echo "Enabling xdebug..."
        docker_exec "
            ln -s /etc/php/7.0/mods-available/xdebug.ini /etc/php/7.0/cli/conf.d/20-xdebug.ini;
            ln -s /etc/php/7.0/mods-available/xdebug.ini /etc/php/7.0/fpm/conf.d/20-xdebug.ini;
            service php7.0-fpm restart;
        "
    else
        echo "Disabling xdebug..."
        docker_exec "
            rm -f /etc/php/7.0/cli/conf.d/20-xdebug.ini;
            rm -f /etc/php/7.0/fpm/conf.d/20-xdebug.ini;
            service php7.0-fpm restart;
        "
    fi
elif [ "$1" == "docker" ]; then
    if [ -z $2 ]; then
        echo -e "Available options:
            * start
            * stop
            * restart
            * reload
            * update
            * ssh
            * logs
        "
    elif [ "$2" == "start" ]; then
        docker_run
    elif [ "$2" == "stop" ]; then
        echo "Stopping container '$CONTAINER_NAME'..."
        docker stop $CONTAINER_NAME
    elif [ "$2" == "restart" ]; then
        if docker ps | grep -qs $CONTAINER_NAME; then
            echo "Stopping container '$CONTAINER_NAME'..."
            docker stop $CONTAINER_NAME
        fi
        docker_run
    elif [ "$2" == "reload" ]; then
        if docker ps -a | grep -qs $CONTAINER_NAME; then
            echo "Removing current container..."
            docker rm -f $CONTAINER_NAME
        fi
        docker_run
    elif [ "$2" == "update" ]; then
        echo "Updating image '$IMAGE_NAME'..."
        docker pull $IMAGE_NAME
    elif [ "$2" == "ssh" ]; then
        docker exec -it $CONTAINER_NAME bash
    elif [ "$2" == "logs" ]; then
        docker logs -f $CONTAINER_NAME
    fi
else
    docker exec -it $CONTAINER_NAME bash -c "cd /src; $*"
fi
